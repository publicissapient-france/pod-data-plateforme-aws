---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ingestion pipeline Pod data-platform'

###############################################################################
### Parameters
###############################################################################

Parameters:
  Environment:
    Description: Environment
    Default: prod
    Type: String

  IncomingBucketName:
    Description: Environment
    Default: pod-dp-prod-incoming
    Type: String
    
  RawBucketName:
    Description: Environment
    Default: pod-dp-prod-raw
    Type: String
  
  SchemaBucketName:
    Description: Environment
    Default: pod-dp-prod-schema
    Type: String

  PreparedBucketName:
    Description: Environment
    Default: pod-dp-prod-prepared
    Type: String
  
  ArtifactBucketName:
    Description: Environment
    Default: pod-dp-prod-incoming
    Type: String

   ETLScriptsPrefix:
    Type: String
    MinLength: "1"
    Description: "Location of the Glue job ETL scripts in S3."

  ETLOutputPrefix:
    Type: String
    MinLength: "1"
    Description: "Name of the S3 output path to which this CloudFormation template's AWS Glue jobs are going to write ETL output."

  IngestionStateMachineArn:
    Description: Arn of the ingestion pipeline state machine
    Type: String

  JobLanguage:
    Type: String
    MinLength: "4"
    Default: "scala"
    Description: "Language of the ingestion AWS Glue Job."

###############################################################################
### Resources
###############################################################################

Resources:
  IngestionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionString: 
        !Sub
        - |
          {
            "Comment": "State Machine to run ingestion pipeline",
            "StartAt": "MoveDataToRawBucket",
            "States": {
              "MoveDataToRawBucket": {
                  "Type": "Task",
                  "Resource": "${MoveDataToRawBucketLambdaArn}",
                  "Next": "GlueJob"
              },
              "GlueJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                  "Parameters": {
                    "JobName": "${GlueDataIngestionJob}",
                    "Arguments": {
                      "--rawBucketName.$": "$.rawBucketName",
                      "--preparedBucketName.$": "$.preparedBucketName",
                      "--schemaBucketName.$": "$.schemaBucketName",
                      "--sourceName.$": "$.sourceName",
                      "--tableName.$": "$.tableName"
                    }
                  },
                  "Next": "Start Crawler"
                },
                "Start Crawler": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "arn:aws:lambda:us-east-2:943054598959:function:start-crawler:$LATEST",
                    "Payload": {
                      "crawler-name": "$.sourceName"
                    }
                  },
                  "End": true
                }
            }
          }
        - MoveDataToRawBucketLambdaArn: !GetAtt MoveDataToRawBucketLambda.Arn
          GlueDataIngestionJob: !Ref GlueDataIngestionJob
      RoleArn: !GetAtt IngestionStateMachineRole.Arn
      StateMachineName: IngestionStateMachine
      Tags:
        - Key: Description
          Value: pod-dataplatform
  
  IngestionStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IngestionStateMachineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: "*"
        - PolicyName: Glue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "glue:StartJobRun"
                - "glue:GetJobRun"
                - "glue:GetJobRuns"
                - "glue:BatchStopJobRun"
              Resource: "*"
      Path: "/"

  AWSGlueJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${RawBucketName}"
                  - !Sub "arn:aws:s3:::${RawBucketName}/*"
                  - !Sub "arn:aws:s3:::${SchemaBucketName}"
                  - !Sub "arn:aws:s3:::${SchemaBucketName}/*"
                  - !Sub "arn:aws:s3:::${PreparedBucketName}"
                  - !Sub "arn:aws:s3:::${PreparedBucketName}/*"
                  - !Sub "arn:aws:s3:::${ArtifactBucketName}"
                  - !Sub "arn:aws:s3:::${ArtifactBucketName}/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: "/"
      
  IngestionSFTriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref IngestionSFTriggerLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${IncomingBucketName}'
      SourceAccount: !Ref AWS::AccountId
      Tags:
        - Key: Description
          Value: pod-dataplatform

  IngestionSFTriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: '*'
        - PolicyName: startStepFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - states:StartExecution
              Resource:  !Ref IngestionStateMachineArn
      Tags:
        - Key: Description
          Value: pod-dataplatform

  IngestionCrawlerTriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: '*'
        - PolicyName: startGlueCrawler
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - glue:StartCrawler
              Resource:  '*'
      Tags:
        - Key: Description
          Value: pod-dataplatform
  
  GlueDataIngestionJob:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !Ref AWSGlueJobRole
      Name: "GlueDataIngestionJob"
      Command: {
        "Name" : "glueetl",
        "ScriptLocation": !Sub "s3://${ArtifactBucketName}/${ETLScriptsPrefix}/process_data_ingestion.scala"
      }
      DefaultArguments: {
          "--job-language" : !Ref JobLanguage,
          "--raw-bucket-name" : !Ref RawBucketName,
          "--schema-bucket-name" : !Ref SchemaBucketName,
          "--prepared-bucket-name" : !Ref PreparedBucketName
      }
      MaxRetries: 0
      Description: "Process data ingestion for pod-data-platform-job."
      AllocatedCapacity: 5

  IngestionSFTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IngestionStateMachineTrigger
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def lambda_handler(event, context):
              sf_client = boto3.client('stepfunctions')
              state_machine_arn = os.environ['STATEMACHINEARN']

              event_key = event['Records'][0]['s3']['object']['key']
              filename = os.path.basename(event_key)
              source_name = event_key.split("/")[0]
              table_name = os.path.splitext(filename)[0]

              sm_input = json.dumps({
                  "rawBucketName": os.environ['RAWBUCKETNAME'],
                  "preparedBucketName": os.environ['PREPAREDBUCKETNAME'],
                  "schemaBucketName": os.environ['SCHEMABUCKETNAME'],
                  "sourceName": source_name,
                  "tableName": table_name,
              })
              logger.info(f'Step Function trigger input: {sm_input}')

              response = sf_client.start_execution(
                  stateMachineArn=state_machine_arn,
                  input=sm_input
              )
              logger.info(f'Step Function trigger response: {response}')
      Handler: index.lambda_handler
      Environment:
        Variables:
          STATEMACHINEARN: !Ref IngestionStateMachineArn
          RAWBUCKETNAME: !Ref RawBucketName
          PREPAREDBUCKETNAME: !Ref PreparedBucketName
          SCHEMABUCKETNAME: !Ref SchemaBucketName
      Role: !GetAtt IngestionSFTriggerLambdaExecutionRole.Arn
      Runtime: python3.8
      MemorySize: 256
      Timeout: 128
      Tags:
        - Key: Description
          Value: pod-dataplatform

  IngestionCrawlerTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IngestionCrawlerTrigger
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('glue')
          
              client.start_crawler(Name=event['crawler-name'])
      Handler: index.lambda_handler
      Role: !GetAtt IngestionCrawlerTriggerLambdaExecutionRole.Arn
      Runtime: python3.8
      MemorySize: 256
      Timeout: 128
      Tags:
        - Key: Description
          Value: pod-dataplatform

###############################################################################
### Outputs
###############################################################################

Outputs:
  IngestionSFTriggerLambdaFunctionArn:
    Description: Arn of the Lambda that triggers the ingestion pipeline state machine
    Value: !GetAtt IngestionSFTriggerLambdaFunction.Arn
